	- java.lang.IllegalArgumentException runtime exception koji treba uhvatiti kada se koristi metoda 
	valueOf(String string) kod citanja protokola(enum).
	- Svaki thread ima kao atribut zaposlenog zbog kog je kreiran da se isti ne bi morao identifikovati
	svaki put kad posalje zahtjev prema serveru. (DONE)
	-Treba pripaziti na exception koji se baci pri isteku konekcije, u catch resetovati konekciju
-Razmotriti mogucnost dodavanja metode pretrazi bazu po imenu u dbDto.
===========================================================================================================================================
		OVAKO PROCITAS LISTU ZAPOSLENIH DA BI IZBJEGAO KONFLIKTE IZMEDJU TIPOVA 
        List<List<? extends IDTO>> listaZaposlenih = (List<List<? extends IDTO>>)in.readObject();
        List<DTOAdministrator> listaAktivnihAdministratora = (List<DTOAdministrator>)listaZaposlenih.get(0);
        List<DTOMenadzer> listaAktivnihMenadzera = (List<DTOMenadzer>)listaZaposlenih.get(1);
        List<DTORacunovodja> listaAktivnihRacunovodja = (List<DTORacunovodja>)listaZaposlenih.get(2);
        List<DTOSkladistar> listaAktivnihSkladistara = (List<DTOSkladistar>)listaZaposlenih.get(3);
        List<DTOProdavacKarata> listaAktivnihProdavacaKarata = (List<DTOProdavacKarata>)listaZaposlenih.get(4);
        List<DTOProdavacHraneIPica> listaAktivnihProdavacaHraneIPica = (List<DTOProdavacHraneIPica>)listaZaposlenih.get(5);
        List<DTOKinooperater> listaAktivnihKinooperatera = (List<DTOKinooperater>)listaZaposlenih.get(6);
		
		List<Zaposleni> listaZaposlenih = new ArrayList<>();
		for(DTOAdministrator x : listaAktivnihAdministratora){
			listaZaposlenih.add((Zaposleni)x.getAdministrator);
		}
===========================================================================================================================================		
		Odsjecak koda koji vraca listu liste zaposlenih po njihovim pozicijama bez naloga -- za potrebe racunovodje
		List<DTOAdministrator> listaAktivnihAdministratora;
        List<DTOMenadzer> listaAktivnihMenadzera;
        List<DTORacunovodja> listaAktivnihRacunovodja;
        List<DTOSkladistar> listaAktivnihSkladistara;
        List<DTOProdavacKarata> listaAktivnihProdavacaKarata;
        List<DTOProdavacHraneIPica> listaAktivnihProdavacaHraneIPica;
        List<DTOKinooperater> listaAktivnihKinooperatera;
        List<List<? extends IDTO>> listaAktivnihZaposlenih = new ArrayList<>();

        listaAktivnihAdministratora = (List<DTOAdministrator>)new DBDAOAdministrator().ispisiSveAktivneAdministratore(konekcijaNaBazu);
        listaAktivnihAdministratora.stream().parallel().forEach(x->{
            x.getAdministrator().setNalog(null);
        });
        listaAktivnihMenadzera = (List<DTOMenadzer>)new DBDAOMenadzer().ispisiSveAktivneMenadzere(konekcijaNaBazu);
        listaAktivnihMenadzera.stream().parallel().forEach(x->{
            x.getMenadzer().setNalog(null);
        });
        listaAktivnihRacunovodja = (List<DTORacunovodja>)new DBDAORacunovodja().ispisiSveAktivneRacunovodje(konekcijaNaBazu);
        listaAktivnihRacunovodja.stream().parallel().forEach(x->{
            x.getRacunovodja().setNalog(null);
        });
        listaAktivnihSkladistara = (List<DTOSkladistar>)new DBDAOSkladistar().ispisiSveAktivneSkladistare(konekcijaNaBazu);
        listaAktivnihSkladistara.stream().parallel().forEach(x->{
            x.getSkladistar().setNalog(null);
        });
        listaAktivnihProdavacaKarata = (List<DTOProdavacKarata>)new DBDAOProdavacKarata().ispisiSveAktivneProdavceKarata(konekcijaNaBazu);
        listaAktivnihProdavacaKarata.stream().parallel().forEach(x->{
            x.getProdavacKarata().setNalog(null);
        });
        listaAktivnihProdavacaHraneIPica = (List<DTOProdavacHraneIPica>)new DBDAOProdavacHraneIPica().ispisiSveAktivneProdavceHraneIPica(konekcijaNaBazu);
        listaAktivnihProdavacaHraneIPica.stream().parallel().forEach(x->{
            x.getProdavacHraneIPica().setNalog(null);
        });
        listaAktivnihKinooperatera = (List<DTOKinooperater>)new DBDAOKinooperater().ispisiSveAktivneKinooperatere(konekcijaNaBazu);
        listaAktivnihKinooperatera.stream().parallel().forEach(x->{
            x.getKinooperater().setNalog(null);
        });

        listaAktivnihZaposlenih.add(listaAktivnihAdministratora);
        listaAktivnihZaposlenih.add(listaAktivnihMenadzera);
        listaAktivnihZaposlenih.add(listaAktivnihRacunovodja);
        listaAktivnihZaposlenih.add(listaAktivnihSkladistara);
        listaAktivnihZaposlenih.add(listaAktivnihProdavacaKarata);
        listaAktivnihZaposlenih.add(listaAktivnihProdavacaHraneIPica);
        listaAktivnihZaposlenih.add(listaAktivnihKinooperatera);

        out.writeObject(listaAktivnihZaposlenih);
===============================================================================================================================================
		Odsjecak koda koji vraca listu listi zaposlenih po njihovim pozicijama bez plate i hesha lozinke -- za potrebe admina
		List<DTOAdministrator> listaAktivnihAdministratora;
        List<DTOMenadzer> listaAktivnihMenadzera;
        List<DTORacunovodja> listaAktivnihRacunovodja;
        List<DTOSkladistar> listaAktivnihSkladistara;
        List<DTOProdavacKarata> listaAktivnihProdavacaKarata;
        List<DTOProdavacHraneIPica> listaAktivnihProdavacaHraneIPica;
        List<DTOKinooperater> listaAktivnihKinooperatera;
        List<List<? extends IDTO>> listaAktivnihZaposlenih = new ArrayList<>();

        listaAktivnihAdministratora = (List<DTOAdministrator>)new DBDAOAdministrator().ispisiSveAktivneAdministratore(konekcijaNaBazu);
        listaAktivnihAdministratora.stream().parallel().forEach(x->{
            x.getAdministrator().setPlata(null);
            x.getAdministrator().getNalog().setLozinkaHash(new String());
        });
        listaAktivnihMenadzera = (List<DTOMenadzer>)new DBDAOMenadzer().ispisiSveAktivneMenadzere(konekcijaNaBazu);
        listaAktivnihMenadzera.stream().parallel().forEach(x->{
            x.getMenadzer().setPlata(null);
            x.getMenadzer().getNalog().setLozinkaHash(new String());
        });
        listaAktivnihRacunovodja = (List<DTORacunovodja>)new DBDAORacunovodja().ispisiSveAktivneRacunovodje(konekcijaNaBazu);
        listaAktivnihRacunovodja.stream().parallel().forEach(x->{
            x.getRacunovodja().setPlata(null);
            x.getRacunovodja().getNalog().setLozinkaHash(new String());
        });
        listaAktivnihSkladistara = (List<DTOSkladistar>)new DBDAOSkladistar().ispisiSveAktivneSkladistare(konekcijaNaBazu);
        listaAktivnihSkladistara.stream().parallel().forEach(x->{
            x.getSkladistar().setPlata(null);
            x.getSkladistar().getNalog().setLozinkaHash(new String());
        });
        listaAktivnihProdavacaKarata = (List<DTOProdavacKarata>)new DBDAOProdavacKarata().ispisiSveAktivneProdavceKarata(konekcijaNaBazu);
        listaAktivnihProdavacaKarata.stream().parallel().forEach(x->{
            x.getProdavacKarata().setPlata(null);
            x.getProdavacKarata().getNalog().setLozinkaHash(new String());
        });
        listaAktivnihProdavacaHraneIPica = (List<DTOProdavacHraneIPica>)new DBDAOProdavacHraneIPica().ispisiSveAktivneProdavceHraneIPica(konekcijaNaBazu);
        listaAktivnihProdavacaHraneIPica.stream().parallel().forEach(x->{
            x.getProdavacHraneIPica().setPlata(null);
            x.getProdavacHraneIPica().getNalog().setLozinkaHash(new String());
        });
        listaAktivnihKinooperatera = (List<DTOKinooperater>)new DBDAOKinooperater().ispisiSveAktivneKinooperatere(konekcijaNaBazu);
        listaAktivnihKinooperatera.stream().parallel().forEach(x->{
            x.getKinooperater().setPlata(null);
            x.getKinooperater().getNalog().setLozinkaHash(new String());
        });

        listaAktivnihZaposlenih.add(listaAktivnihAdministratora);
        listaAktivnihZaposlenih.add(listaAktivnihMenadzera);
        listaAktivnihZaposlenih.add(listaAktivnihRacunovodja);
        listaAktivnihZaposlenih.add(listaAktivnihSkladistara);
        listaAktivnihZaposlenih.add(listaAktivnihProdavacaKarata);
        listaAktivnihZaposlenih.add(listaAktivnihProdavacaHraneIPica);
        listaAktivnihZaposlenih.add(listaAktivnihKinooperatera);
===============================================================================================================================================